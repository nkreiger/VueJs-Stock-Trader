{"remainingRequest":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/thread-loader/dist/cjs.js!/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/babel-loader/lib/index.js!/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/eslint-loader/index.js??ref--13-0!/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/stocks.js","dependencies":[{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/stocks.js","mtime":1539753419000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/cache-loader/dist/cjs.js","mtime":1539753125000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n// grab custom data\nimport stocks from \"../../data/stocks\"; // stocks state\n\nvar state = {\n  stocks: []\n};\nvar mutations = {\n  setStocks: function setStocks(state, stocks) {\n    console.log(\"setting stocks\");\n    state.stocks = stocks;\n    console.log(state.stocks);\n  },\n  randStocks: function randStocks(state) {\n    state.stocks.forEach(function (stock) {\n      // set price to new price, round it back to integer\n      stock.price = Math.round(stock.price * (1 + Math.random() - 0.5));\n    });\n  }\n};\nvar actions = {\n  buyStock: function buyStock(_ref, order) {\n    var commit = _ref.commit;\n    commit(\"buyStock\", order);\n  },\n  initStocks: function initStocks(_ref2) {\n    var commit = _ref2.commit;\n    commit(\"setStocks\", stocks);\n  },\n  randomizeStocks: function randomizeStocks(_ref3) {\n    var commit = _ref3.commit;\n    commit(\"randStocks\");\n  }\n};\nvar getters = {\n  stocks: function stocks(state) {\n    return state.stocks;\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/stocks.js"],"names":["stocks","state","mutations","setStocks","console","log","randStocks","forEach","stock","price","Math","round","random","actions","buyStock","order","commit","initStocks","randomizeStocks","getters"],"mappings":";AAAA;AACA,OAAOA,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,IAAMC,QAAQ;AACZD,UAAQ;AADI,CAAd;AAIA,IAAME,YAAY;AAChBC,WADgB,qBACNF,KADM,EACCD,MADD,EACS;AACvBI,YAAQC,GAAR,CAAY,gBAAZ;AACAJ,UAAMD,MAAN,GAAeA,MAAf;AACAI,YAAQC,GAAR,CAAYJ,MAAMD,MAAlB;AACD,GALe;AAMhBM,YANgB,sBAMLL,KANK,EAME;AAChBA,UAAMD,MAAN,CAAaO,OAAb,CAAqB,iBAAS;AAC5B;AACAC,YAAMC,KAAN,GAAcC,KAAKC,KAAL,CAAWH,MAAMC,KAAN,IAAe,IAAIC,KAAKE,MAAL,EAAJ,GAAoB,GAAnC,CAAX,CAAd;AACD,KAHD;AAID;AAXe,CAAlB;AAcA,IAAMC,UAAU;AACdC,YAAU,wBAAaC,KAAb,EAAuB;AAAA,QAApBC,MAAoB,QAApBA,MAAoB;AAC/BA,WAAO,UAAP,EAAmBD,KAAnB;AACD,GAHa;AAIdE,cAAY,2BAAgB;AAAA,QAAbD,MAAa,SAAbA,MAAa;AAC1BA,WAAO,WAAP,EAAoBhB,MAApB;AACD,GANa;AAOdkB,mBAAiB,gCAAgB;AAAA,QAAbF,MAAa,SAAbA,MAAa;AAC/BA,WAAO,YAAP;AACD;AATa,CAAhB;AAYA,IAAMG,UAAU;AACdnB,UAAQ,uBAAS;AACf,WAAOC,MAAMD,MAAb;AACD;AAHa,CAAhB;AAMA,eAAe;AACbC,cADa;AAEbC,sBAFa;AAGbW,kBAHa;AAIbM;AAJa,CAAf","sourcesContent":["// grab custom data\nimport stocks from \"../../data/stocks\";\n\n// stocks state\nconst state = {\n  stocks: []\n};\n\nconst mutations = {\n  setStocks(state, stocks) {\n    console.log(\"setting stocks\");\n    state.stocks = stocks;\n    console.log(state.stocks);\n  },\n  randStocks(state) {\n    state.stocks.forEach(stock => {\n      // set price to new price, round it back to integer\n      stock.price = Math.round(stock.price * (1 + Math.random() - 0.5));\n    });\n  }\n};\n\nconst actions = {\n  buyStock: ({ commit }, order) => {\n    commit(\"buyStock\", order);\n  },\n  initStocks: ({ commit }) => {\n    commit(\"setStocks\", stocks);\n  },\n  randomizeStocks: ({ commit }) => {\n    commit(\"randStocks\");\n  }\n};\n\nconst getters = {\n  stocks: state => {\n    return state.stocks;\n  }\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};\n"]}]}