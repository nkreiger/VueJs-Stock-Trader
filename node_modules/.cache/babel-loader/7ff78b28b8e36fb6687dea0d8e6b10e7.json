{"remainingRequest":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/babel-loader/lib/index.js!/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/eslint-loader/index.js??ref--13-0!/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/portfolio.js","dependencies":[{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/portfolio.js","mtime":1539753419000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/cache-loader/dist/cjs.js","mtime":1539753125000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nvar state = {\n  funds: 10000,\n  stocks: []\n};\nvar mutations = {\n  buyStock: function buyStock(state, _ref) {\n    var stockId = _ref.stockId,\n        quantity = _ref.quantity,\n        stockPrice = _ref.stockPrice;\n    // auto loops through all el and execute this function for each\n    var record = state.stocks.find(function (element) {\n      return element.id == stockId;\n    }); // record is set with true or false now\n\n    if (record) {\n      record.quantity += quantity;\n    } else {\n      // add to state array\n      state.stocks.push({\n        id: stockId,\n        quantity: quantity\n      });\n    } // update funds\n\n\n    state.funds -= stockPrice * quantity;\n  },\n  sellStock: function sellStock(state, _ref2) {\n    var stockId = _ref2.stockId,\n        quantity = _ref2.quantity,\n        stockPrice = _ref2.stockPrice;\n    // record is set to correct stock\n    var record = state.stocks.find(function (element) {\n      return element.id == stockId;\n    }); // quantity is more than what you have, don't sell\n\n    if (record.quantity > quantity) {\n      record.quantity -= quantity;\n    } else {\n      state.stocks.splice(state.stocks.indexOf(record), 1);\n    } // update funds\n\n\n    state.funds += stockPrice * quantity;\n  },\n  // this must be in this file\n  setPortfolio: function setPortfolio(state, portfolio) {\n    // get state and portfolio from actions.js\n    state.funds = portfolio.funds;\n    console.log(state.funds);\n    state.stocks = portfolio.stockPortfolio ? portfolio.stockPortfolio : [];\n    console.log(state.stocks);\n  }\n};\nvar actions = {\n  sellStock: function sellStock(_ref3, order) {\n    var commit = _ref3.commit;\n    commit(\"sellStock\", order);\n  } // buy stock is already committed in stocks.js actions\n\n};\nvar getters = {\n  stockPortfolio: function stockPortfolio(state, getters) {\n    // transform each el in stocks array\n    return state.stocks.map(function (stock) {\n      // get stocks with stocks.js getter\n      var record = getters.stocks.find(function (element) {\n        return element.id == stock.id;\n      }); // for each record return a new object, from the map\n\n      var currentStock = {\n        id: stock.id,\n        quantity: stock.quantity,\n        name: record.name,\n        price: record.price\n      };\n      return currentStock;\n    });\n  },\n  funds: function funds(state) {\n    return state.funds;\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["/Users/noahkreiger/Documents/allCodeWork/VUE/test-me/test-me/src/store/modules/portfolio.js"],"names":["state","funds","stocks","mutations","buyStock","stockId","quantity","stockPrice","record","find","element","id","push","sellStock","splice","indexOf","setPortfolio","portfolio","console","log","stockPortfolio","actions","order","commit","getters","map","stock","currentStock","name","price"],"mappings":";;AAAA,IAAMA,QAAQ;AACZC,SAAO,KADK;AAEZC,UAAQ;AAFI,CAAd;AAKA,IAAMC,YAAY;AAChBC,UADgB,oBACPJ,KADO,QACmC;AAAA,QAAjCK,OAAiC,QAAjCA,OAAiC;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,UAAc,QAAdA,UAAc;AACjD;AACA,QAAMC,SAASR,MAAME,MAAN,CAAaO,IAAb,CAAkB;AAAA,aAAWC,QAAQC,EAAR,IAAcN,OAAzB;AAAA,KAAlB,CAAf,CAFiD,CAGjD;;AAEA,QAAIG,MAAJ,EAAY;AACVA,aAAOF,QAAP,IAAmBA,QAAnB;AACD,KAFD,MAEO;AACL;AACAN,YAAME,MAAN,CAAaU,IAAb,CAAkB;AAChBD,YAAIN,OADY;AAEhBC,kBAAUA;AAFM,OAAlB;AAID,KAbgD,CAcjD;;;AACAN,UAAMC,KAAN,IAAeM,aAAaD,QAA5B;AACD,GAjBe;AAkBhBO,WAlBgB,qBAkBNb,KAlBM,SAkBoC;AAAA,QAAjCK,OAAiC,SAAjCA,OAAiC;AAAA,QAAxBC,QAAwB,SAAxBA,QAAwB;AAAA,QAAdC,UAAc,SAAdA,UAAc;AAClD;AACA,QAAMC,SAASR,MAAME,MAAN,CAAaO,IAAb,CAAkB;AAAA,aAAWC,QAAQC,EAAR,IAAcN,OAAzB;AAAA,KAAlB,CAAf,CAFkD,CAIlD;;AACA,QAAIG,OAAOF,QAAP,GAAkBA,QAAtB,EAAgC;AAC9BE,aAAOF,QAAP,IAAmBA,QAAnB;AACD,KAFD,MAEO;AACLN,YAAME,MAAN,CAAaY,MAAb,CAAoBd,MAAME,MAAN,CAAaa,OAAb,CAAqBP,MAArB,CAApB,EAAkD,CAAlD;AACD,KATiD,CAUlD;;;AACAR,UAAMC,KAAN,IAAeM,aAAaD,QAA5B;AACD,GA9Be;AA8Bb;AACHU,cA/BgB,wBA+BHhB,KA/BG,EA+BIiB,SA/BJ,EA+Be;AAC7B;AACAjB,UAAMC,KAAN,GAAcgB,UAAUhB,KAAxB;AACAiB,YAAQC,GAAR,CAAYnB,MAAMC,KAAlB;AACAD,UAAME,MAAN,GAAee,UAAUG,cAAV,GAA2BH,UAAUG,cAArC,GAAsD,EAArE;AACAF,YAAQC,GAAR,CAAYnB,MAAME,MAAlB;AACD;AArCe,CAAlB;AAwCA,IAAMmB,UAAU;AACdR,WADc,4BACQS,KADR,EACe;AAAA,QAAjBC,MAAiB,SAAjBA,MAAiB;AAC3BA,WAAO,WAAP,EAAoBD,KAApB;AACD,GAHa,CAId;;AAJc,CAAhB;AAOA,IAAME,UAAU;AACdJ,gBADc,0BACCpB,KADD,EACQwB,OADR,EACiB;AAC7B;AACA,WAAOxB,MAAME,MAAN,CAAauB,GAAb,CAAiB,iBAAS;AAC/B;AACA,UAAMjB,SAASgB,QAAQtB,MAAR,CAAeO,IAAf,CAAoB;AAAA,eAAWC,QAAQC,EAAR,IAAce,MAAMf,EAA/B;AAAA,OAApB,CAAf,CAF+B,CAI/B;;AACA,UAAMgB,eAAe;AACnBhB,YAAIe,MAAMf,EADS;AAEnBL,kBAAUoB,MAAMpB,QAFG;AAGnBsB,cAAMpB,OAAOoB,IAHM;AAInBC,eAAOrB,OAAOqB;AAJK,OAArB;AAMA,aAAOF,YAAP;AACD,KAZM,CAAP;AAaD,GAhBa;AAiBd1B,OAjBc,iBAiBRD,KAjBQ,EAiBD;AACX,WAAOA,MAAMC,KAAb;AACD;AAnBa,CAAhB;AAsBA,eAAe;AACbD,cADa;AAEbG,sBAFa;AAGbkB,kBAHa;AAIbG;AAJa,CAAf","sourcesContent":["const state = {\n  funds: 10000,\n  stocks: []\n};\n\nconst mutations = {\n  buyStock(state, { stockId, quantity, stockPrice }) {\n    // auto loops through all el and execute this function for each\n    const record = state.stocks.find(element => element.id == stockId);\n    // record is set with true or false now\n\n    if (record) {\n      record.quantity += quantity;\n    } else {\n      // add to state array\n      state.stocks.push({\n        id: stockId,\n        quantity: quantity\n      });\n    }\n    // update funds\n    state.funds -= stockPrice * quantity;\n  },\n  sellStock(state, { stockId, quantity, stockPrice }) {\n    // record is set to correct stock\n    const record = state.stocks.find(element => element.id == stockId);\n\n    // quantity is more than what you have, don't sell\n    if (record.quantity > quantity) {\n      record.quantity -= quantity;\n    } else {\n      state.stocks.splice(state.stocks.indexOf(record), 1);\n    }\n    // update funds\n    state.funds += stockPrice * quantity;\n  }, // this must be in this file\n  setPortfolio(state, portfolio) {\n    // get state and portfolio from actions.js\n    state.funds = portfolio.funds;\n    console.log(state.funds);\n    state.stocks = portfolio.stockPortfolio ? portfolio.stockPortfolio : [];\n    console.log(state.stocks);\n  }\n};\n\nconst actions = {\n  sellStock({ commit }, order) {\n    commit(\"sellStock\", order);\n  }\n  // buy stock is already committed in stocks.js actions\n};\n\nconst getters = {\n  stockPortfolio(state, getters) {\n    // transform each el in stocks array\n    return state.stocks.map(stock => {\n      // get stocks with stocks.js getter\n      const record = getters.stocks.find(element => element.id == stock.id);\n\n      // for each record return a new object, from the map\n      const currentStock = {\n        id: stock.id,\n        quantity: stock.quantity,\n        name: record.name,\n        price: record.price\n      };\n      return currentStock;\n    });\n  },\n  funds(state) {\n    return state.funds;\n  }\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};\n"]}]}